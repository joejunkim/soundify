{"ast":null,"code":"import { csrfFetch } from \"./csrf.js\";\nexport const LOAD_PLAYLISTS = \"library/LOAD_PLAYLISTS\";\n\nconst loadPlaylists = playlists => ({\n  type: LOAD_PLAYLISTS,\n  playlists\n});\n\nexport const getPlayLists = () => async dispatch => {\n  const res = await csrfFetch(`/api/playlists`);\n\n  if (res.ok) {\n    const playlists = await res.json();\n    dispatch(loadPlaylists(playlists));\n  }\n};\nconst initialState = {};\n\nconst playlistReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOAD_PLAYLISTS:\n      const allPlaylists = {};\n      action.playlists.forEach(playlist => {\n        allPlaylists[playlist.id] = playlist;\n      });\n      return { ...state,\n        ...allPlaylists\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default playlistReducer;","map":{"version":3,"sources":["/home/joe/app-academy/projects/soundify/frontend/src/store/playlist.js"],"names":["csrfFetch","LOAD_PLAYLISTS","loadPlaylists","playlists","type","getPlayLists","dispatch","res","ok","json","initialState","playlistReducer","state","action","allPlaylists","forEach","playlist","id"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AAEA,OAAO,MAAMC,cAAc,GAAG,wBAAvB;;AAEP,MAAMC,aAAa,GAAIC,SAAD,KAAgB;AAClCC,EAAAA,IAAI,EAAEH,cAD4B;AAElCE,EAAAA;AAFkC,CAAhB,CAAtB;;AAKA,OAAO,MAAME,YAAY,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAChD,QAAMC,GAAG,GAAG,MAAMP,SAAS,CAAE,gBAAF,CAA3B;;AAEA,MAAIO,GAAG,CAACC,EAAR,EAAY;AACR,UAAML,SAAS,GAAG,MAAMI,GAAG,CAACE,IAAJ,EAAxB;AACAH,IAAAA,QAAQ,CAACJ,aAAa,CAACC,SAAD,CAAd,CAAR;AACH;AACJ,CAPM;AASP,MAAMO,YAAY,GAAG,EAArB;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AACtD,UAAQA,MAAM,CAACT,IAAf;AACI,SAAKH,cAAL;AACI,YAAMa,YAAY,GAAG,EAArB;AACAD,MAAAA,MAAM,CAACV,SAAP,CAAiBY,OAAjB,CAA0BC,QAAD,IAAc;AACnCF,QAAAA,YAAY,CAACE,QAAQ,CAACC,EAAV,CAAZ,GAA4BD,QAA5B;AACH,OAFD;AAGA,aAAO,EACH,GAAGJ,KADA;AAEH,WAAGE;AAFA,OAAP;;AAIJ;AACI,aAAOF,KAAP;AAXR;AAaH,CAdD;;AAgBA,eAAeD,eAAf","sourcesContent":["import { csrfFetch } from \"./csrf.js\";\n\nexport const LOAD_PLAYLISTS = \"library/LOAD_PLAYLISTS\";\n\nconst loadPlaylists = (playlists) => ({\n    type: LOAD_PLAYLISTS,\n    playlists\n})\n\nexport const getPlayLists = () => async dispatch => {\n    const res = await csrfFetch(`/api/playlists`)\n\n    if (res.ok) {\n        const playlists = await res.json();\n        dispatch(loadPlaylists(playlists));\n    }\n}\n\nconst initialState = {};\n\nconst playlistReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOAD_PLAYLISTS:\n            const allPlaylists = {};\n            action.playlists.forEach((playlist) => {\n                allPlaylists[playlist.id] = playlist;\n            })\n            return {\n                ...state,\n                ...allPlaylists,\n            }\n        default:\n            return state;\n    }\n}\n\nexport default playlistReducer;\n"]},"metadata":{},"sourceType":"module"}